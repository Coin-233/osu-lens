// netlify/functions/proxy.js
exports.handler = async (event, context) => {
  const { url } = event.queryStringParameters; // 要代理的目标 URL
  const originalMethod = event.httpMethod;
  const originalHeaders = event.headers;
  const originalBody = event.body; // 对于 POST 请求

  if (!url) {
    return {
      statusCode: 400,
      body: JSON.stringify({ error: "缺少 'url' 查询参数" }),
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
    };
  }

  try {
    // 重构要转发的请求头，过滤掉敏感信息
    const headers = {};
    for (const key in originalHeaders) {
      if (!['host', 'connection', 'x-netlify-original-pathname', 'x-netlify-original-hash', 'x-netlify-original-search', 'x-netlify-original-uri', 'x-forwarded-for', 'x-forwarded-host', 'x-forwarded-port', 'x-forwarded-proto', 'x-nf-client-connection-ip', 'x-nf-form-urlencoded', 'via'].includes(key.toLowerCase())) {
        headers[key] = originalHeaders[key];
      }
    }

    const fetchOptions = {
      method: originalMethod,
      headers: new Headers(headers),
      redirect: 'follow', // 遵循目标 URL 的重定向
    };

    if (originalMethod === 'POST' || originalMethod === 'PUT' || originalMethod === 'PATCH') {
      fetchOptions.body = originalBody;
    }

    const response = await fetch(url, fetchOptions);

    // 过滤要返回给客户端的响应头
    const responseHeaders = {};
    for (const [key, value] of response.headers.entries()) {
      // 避免传递有问题的头
      if (!['transfer-encoding', 'content-encoding', 'strict-transport-security'].includes(key.toLowerCase())) {
        responseHeaders[key] = value;
      }
    }

    return {
      statusCode: response.status,
      body: await response.text(), // 使用 .text() 以处理非 JSON 响应
      headers: {
        ...responseHeaders,
        'Access-Control-Allow-Origin': '*', // 启用所有源的 CORS
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      },
    };
  } catch (error) {
    console.error(`代理 URL ${url} 时出错:`, error);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: `代理错误: ${error.message}` }),
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
    };
  }
};
